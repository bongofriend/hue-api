// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package gen

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	BasicAuthScopes = "basicAuth.Scopes"
)

// Defines values for Brightness.
const (
	Dec Brightness = "dec"
	Inc Brightness = "inc"
)

// Defines values for GroupState.
const (
	AllOn GroupState = "AllOn"
	AnyOn GroupState = "AnyOn"
	None  GroupState = "None"
)

// Defines values for LightMode.
const (
	Day   LightMode = "day"
	Night LightMode = "night"
)

// Brightness defines model for Brightness.
type Brightness string

// GroupState defines model for GroupState.
type GroupState string

// LightGroup defines model for LightGroup.
type LightGroup struct {
	Id     int        `json:"id"`
	Lights []string   `json:"lights"`
	Name   string     `json:"name"`
	State  GroupState `json:"state"`
}

// LightMode defines model for LightMode.
type LightMode string

// LightGroupResponse defines model for LightGroupResponse.
type LightGroupResponse struct {
	Lightgroups *[]LightGroup `json:"lightgroups,omitempty"`
}

// GetBrightnessLightGroupIdParams defines parameters for GetBrightnessLightGroupId.
type GetBrightnessLightGroupIdParams struct {
	Level Brightness `form:"level" json:"level"`
}

// GetModeLightGroupIdParams defines parameters for GetModeLightGroupId.
type GetModeLightGroupIdParams struct {
	Mode LightMode `form:"mode" json:"mode"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetBrightnessLightGroupId request
	GetBrightnessLightGroupId(ctx context.Context, lightGroupId int, params *GetBrightnessLightGroupIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLightgroups request
	GetLightgroups(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetModeLightGroupId request
	GetModeLightGroupId(ctx context.Context, lightGroupId int, params *GetModeLightGroupIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetToggleLightGroupId request
	GetToggleLightGroupId(ctx context.Context, lightGroupId int, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetBrightnessLightGroupId(ctx context.Context, lightGroupId int, params *GetBrightnessLightGroupIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBrightnessLightGroupIdRequest(c.Server, lightGroupId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLightgroups(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLightgroupsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetModeLightGroupId(ctx context.Context, lightGroupId int, params *GetModeLightGroupIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetModeLightGroupIdRequest(c.Server, lightGroupId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetToggleLightGroupId(ctx context.Context, lightGroupId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetToggleLightGroupIdRequest(c.Server, lightGroupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetBrightnessLightGroupIdRequest generates requests for GetBrightnessLightGroupId
func NewGetBrightnessLightGroupIdRequest(server string, lightGroupId int, params *GetBrightnessLightGroupIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "lightGroupId", runtime.ParamLocationPath, lightGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/brightness/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "level", runtime.ParamLocationQuery, params.Level); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLightgroupsRequest generates requests for GetLightgroups
func NewGetLightgroupsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lightgroups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetModeLightGroupIdRequest generates requests for GetModeLightGroupId
func NewGetModeLightGroupIdRequest(server string, lightGroupId int, params *GetModeLightGroupIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "lightGroupId", runtime.ParamLocationPath, lightGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mode/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mode", runtime.ParamLocationQuery, params.Mode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetToggleLightGroupIdRequest generates requests for GetToggleLightGroupId
func NewGetToggleLightGroupIdRequest(server string, lightGroupId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "lightGroupId", runtime.ParamLocationPath, lightGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/toggle/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetBrightnessLightGroupIdWithResponse request
	GetBrightnessLightGroupIdWithResponse(ctx context.Context, lightGroupId int, params *GetBrightnessLightGroupIdParams, reqEditors ...RequestEditorFn) (*GetBrightnessLightGroupIdResponse, error)

	// GetLightgroupsWithResponse request
	GetLightgroupsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLightgroupsResponse, error)

	// GetModeLightGroupIdWithResponse request
	GetModeLightGroupIdWithResponse(ctx context.Context, lightGroupId int, params *GetModeLightGroupIdParams, reqEditors ...RequestEditorFn) (*GetModeLightGroupIdResponse, error)

	// GetToggleLightGroupIdWithResponse request
	GetToggleLightGroupIdWithResponse(ctx context.Context, lightGroupId int, reqEditors ...RequestEditorFn) (*GetToggleLightGroupIdResponse, error)
}

type GetBrightnessLightGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetBrightnessLightGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBrightnessLightGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLightgroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LightGroupResponse
}

// Status returns HTTPResponse.Status
func (r GetLightgroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLightgroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetModeLightGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetModeLightGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetModeLightGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetToggleLightGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetToggleLightGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetToggleLightGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetBrightnessLightGroupIdWithResponse request returning *GetBrightnessLightGroupIdResponse
func (c *ClientWithResponses) GetBrightnessLightGroupIdWithResponse(ctx context.Context, lightGroupId int, params *GetBrightnessLightGroupIdParams, reqEditors ...RequestEditorFn) (*GetBrightnessLightGroupIdResponse, error) {
	rsp, err := c.GetBrightnessLightGroupId(ctx, lightGroupId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBrightnessLightGroupIdResponse(rsp)
}

// GetLightgroupsWithResponse request returning *GetLightgroupsResponse
func (c *ClientWithResponses) GetLightgroupsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLightgroupsResponse, error) {
	rsp, err := c.GetLightgroups(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLightgroupsResponse(rsp)
}

// GetModeLightGroupIdWithResponse request returning *GetModeLightGroupIdResponse
func (c *ClientWithResponses) GetModeLightGroupIdWithResponse(ctx context.Context, lightGroupId int, params *GetModeLightGroupIdParams, reqEditors ...RequestEditorFn) (*GetModeLightGroupIdResponse, error) {
	rsp, err := c.GetModeLightGroupId(ctx, lightGroupId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetModeLightGroupIdResponse(rsp)
}

// GetToggleLightGroupIdWithResponse request returning *GetToggleLightGroupIdResponse
func (c *ClientWithResponses) GetToggleLightGroupIdWithResponse(ctx context.Context, lightGroupId int, reqEditors ...RequestEditorFn) (*GetToggleLightGroupIdResponse, error) {
	rsp, err := c.GetToggleLightGroupId(ctx, lightGroupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetToggleLightGroupIdResponse(rsp)
}

// ParseGetBrightnessLightGroupIdResponse parses an HTTP response from a GetBrightnessLightGroupIdWithResponse call
func ParseGetBrightnessLightGroupIdResponse(rsp *http.Response) (*GetBrightnessLightGroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBrightnessLightGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLightgroupsResponse parses an HTTP response from a GetLightgroupsWithResponse call
func ParseGetLightgroupsResponse(rsp *http.Response) (*GetLightgroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLightgroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LightGroupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetModeLightGroupIdResponse parses an HTTP response from a GetModeLightGroupIdWithResponse call
func ParseGetModeLightGroupIdResponse(rsp *http.Response) (*GetModeLightGroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetModeLightGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetToggleLightGroupIdResponse parses an HTTP response from a GetToggleLightGroupIdWithResponse call
func ParseGetToggleLightGroupIdResponse(rsp *http.Response) (*GetToggleLightGroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetToggleLightGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
